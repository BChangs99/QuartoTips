[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Lab2",
    "section": "",
    "text": "Tips to make your life easier with Quarto!\n\n\n\n\n\n\nBlog\n\n\n\n\n\n\n\n\n\nJan 13, 2025\n\n\nBrian Chang\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Tips to make your life easier with Quarto!",
    "section": "",
    "text": "Make your life easier with the VSCode Quarto extension 😌🚀🤓\n\n\nIntroduction\n\nQuarto is a convenient data science tool for Non-Web Developers to convert their Python or R notebooks into reproducible, production quality content for a variety of mediums. While it offers robust features, for those unfamiliar (like me), it can feel counterproductive to be using Quarto when you’re just trying to focus on the creation of content.\nDuring my Masters at UBC, I used Quarto to create a report for a group project (👉 Shameless self plug 👈). While Quarto felt powerful, the learning curve and my unfamiliartiy with it slowed me down. To overcome this, I explored ways to simplify and optimize my Quarto workflow.\nIn this tutorial, I’ll share the three practical tips that helped me maintain productivity without getting bogged down on the annoying side of Quarto. Let’s start with the most basic tip: setting up a Quarto project quickly in VSCode.\n\nSkip The Command Line! 🧑‍💻\n\nA CLI (Command Line Interface) is great when you’re familiar with the commands! But if you’re just starting out, I find it more intuitive and efficient to work with visual navigation as working through a complex command-line setup can be a barrier to your efficiency. This really shines when you don’t remember the exact commands you need to run things.\nThe first thing we need to do is install the Quarto extension. First navigate to the extensions tab in VSCode (Figure 1). You can also press CMD + Shift + X on Mac or CTRL + Shift + X on Windows.\n\n\n\n\n\n\nFigure 1\n\n\n\nThen in the text box search for Quarto and click on the Install button (where my uninstall button is) to get Quarto installed on your VSCode (Figure 2).\n\n\n\n\n\n\nFigure 2\n\n\n\nNow for the crux of the matter, let’s create a project using VSCode! We now want to open up the Command Palette. This is basically where VSCode lets you access all the command configurations of the IDE. It lets you find all the keyboard shortcuts of VSCode and even make new ones for yourself! This is also where we’ll be exploring our first command: Quarto Create Project.\nTo open up the command palette (Figure 3), we can either click on the gear icon on the bottom left and click on it directly, or we can press CMD + Shift + P if you’re on Mac or CTRL + Shift + P on Windows. From here we’ll begin typing “Quarto Create Project” and click on the first dropdown. Now you can specify what type of project by selecting them and a window will pop open for you to select where you want this directory.\n\n\n\n\n\n\nFigure 3\n\n\n\nUsing the Quarto extension, we were able to skip having to remember the commands for creating all the types of projects Quarto offers. With the project all set up, the next step in increasing our productivity is making the rendering process easier.\n\nAutomate your workflow 🤖\n\nSimilar to why we would want to have a visual aid for creating a project, having a quick and convenient button or keyboard shortcut for rendering our project is equally as important for productivity. When you’re modifying the content of your report a lot, you constantly need to update your report to preview the latest changes and making sure everything is up-to-date. Although Quarto offers the preview command for this functionality, I’ve found from personal experience this method inconsistent in displaying my changes. As well, Quarto themselves recommend always rendering the website before deploying it, as stated in their documentation.\nReading on Quarto’s VSCode extensions for the Preview command, I found that the extension will perform both Render and Preview for us when we trigger the preview, ensuring the content of our report is always up to date. Note, this is not to be confused with the preview command mentioned above, which is the CLI version.\nTo execute the extension’s preview command, we can render and preview our Quarto document by clicking the “Preview” button inside the triple dot dropdown in the top right corner of VSCode Figure 4 or using the keyboard shortcut CMD/CTRL + Shift + K. As well, we can also change the format in which the document is rendered and previewed by clicking on “Preview Format…”\n\n\n\n\n\n\nFigure 4\n\n\n\nWhen I was reading through the Quarto documentation section on VSCode, I found a convenient configuration ‘render-on-save’. This allows our entire project to re-render everytime we save the document we’re working in. This allows us to stop having to trigger the re-rendering and previews manually, and instead batch the document saving and rendering together. This is essential to ensuring we are re-rendering as often as possible to make sure our content is always up to date. As well, within the same documentation I found another configuration that allows our preview windows to always open in another window. This is especially useful for developers who use multiple screens.\nTo enable these configurations, we need to access our VSCode Settings Editor. This is where we can access all the configurations and settings of the IDE, not to be confused with the Command Palette which is for commands specifically.\nAs we can see in Figure 5, we can again use the gear icon from Figure 3 and click on Settings, or we can press CMD/CTRL + ,. Now type Quarto to find all the quarto related settings. In here we want to make sure “Quarto &gt; Quarto Render: Render On Save” is checked and “Quarto &gt; Render: Preview Panel” is ticked to what we want.\n\n\n\n\n\n\nFigure 5\n\n\n\nGreat! We’ve now streamlined our workflow significantly through automations and shortcuts, removing the need for manually re-rendering, saving time, and minimizing areas for potential errors. Now the last tip I’ll leave you with is streamlining collaboration with others by including child documents. This personally saved me huge headaches with merge conflicts and allowed our group to work concurrently on the same report in an efficient fashion.\n\nStreamline Collaboration with Child Documents 🤝\n\nCollaborating on group projects can be challenging, especially when multiple contributors are editing the same document, causing a big headache in potential merge conflicts. Quarto’s child documents feature offers a great solution for tackling exactly this. These child documents allow each group member to work on different sections of one combined report, while still keeping everything consolidated.\nFor example, one can person can be writing in the “Introduction” section of the report while another person can be working on the analysis method. Since both people are working in different files, when it’s time to merge, there won’t be any merge conflicts. Looking below at Figure 6 is the format in which I created my parent document to include all my child documents. For posterity, to include child documents you will want to follow the following syntax:\n{{&lt; include _content.qmd &gt;}}\nNote the “_” syntax prepending the file name, this is important to specify so that Quarto won’t render those child documents by themselves. Instead, it only renders the child document into the full parent document. As well, in my example (Figure 6), I specify “content/…”. Although it isn’t necessary to have them in a content folder, I recommend doing so to maintain modularity.\n\n\n\n\n\n\nFigure 6\n\n\n\nThere we go! Now you and your team members can rest easy working on your own sections without interfering with each other. I’ll add as an additional note that although collaboration was the use case for me in using child documents, they can be used for more than just that! For example, if you had a blog with lots of postings but with the same introduction, you could reuse these child documents simply by including the same introduction in all your blog posts!\n\nWrapping Up and Next Steps 🌟📘\n\nQuarto is a pretty powerful tool for creating polished reproducible reports, and with the right configurations and shortcuts, it can feel blazingly fast! In this post, we covered the three key tips I found helpful to streamline your worklflow and allow you to focus on the core content:\nSkip the Command Line: Set up projects easily in VSCode using the Quarto extension\nAutomate Your Workflow: Save time with render-on-save and the render + preview feature\nStreamline Collaboration: Use child documents to organize work and reduce merge conflicts in group projects\n\nWhere do we Go From Here? 🛤️✨\n\nFor web developers, If you’re looking for more visual customization, I’d recommend looking into the custom CSS (Cascading Style Sheets) and the Sass variables section here.\nFor those looking for additional capabilities of the VSCode extension, Quarto has a list of all the features here!\n\nFinal Thoughts\n\nThank you for taking the time to read my post! I genuinely hope these tips prove as helpful to you as they have been for me!\nThis has been my first time writing a blog post, and it’s been a fun learning journey putting it together. If you have any feedback or suggestions, I’d love to hear from you! If you’d like to reach out or learn more about my work, you can find all the ways to contact me on my portfolio.\nSigning Off,\nBrian Chang 👋"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Howdy!"
  }
]